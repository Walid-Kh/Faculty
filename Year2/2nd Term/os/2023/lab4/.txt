#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

void handler(int signum)
{
    int child;
    int stat_loc;
    child = wait(&stat_loc);
    printf("child #%d found the search term in location %d\n", child, WEXITSTATUS(stat_loc));
}

int main(int argc, char **argv)
{
    int searchTerm = atoi(argv[1]);
    int *arr = (int *)malloc((argc - 2) * sizeof(int));
    int arrLen = argc - 2;
    {
        int index = 0;
        for (int i = 2; i < argc; i++)
            arr[index++] = atoi(argv[i]);
    }
    int childrenPid[2] = {0, 0};
    printf("This is the parent process and it has an id of #%d\n", getpid());
    for (int i = 0; i < 2; i++)
    {
        int pid = fork();
        if (pid == -1)
        {
            perror("error in fork");
        }
        else if (pid == 0)
        {
            // child
            printf("This is a child process and it has an id of #%d\n", getpid());
            for (int j = 0 + (i * ((arrLen / 2) + 1)); i < arrLen / (2 - i); j++)
            {
                if (arr[j] == searchTerm)
                {
                    kill(getppid(), SIGUSR1);
                    exit(j);
                }
            }
            sleep(3);
            printf("child #%d terminates", i);
            exit(0);
        }
        else
        {
            signal(SIGUSR1, handler);
            // parent
            childrenPid[i] = pid;
        }
    }
    sleep(10);
    for (int i = 0; i < 2; i++)
        waitpid(childrenPid[i], NULL, 0);
    printf("Value not found\n");
}
/*
Non-code question: Who will be the process executing the code in the handler? (Parent
or First Child or Second Child). How did you know?
-> Parent because the bind is being excuted in the parent block


 */